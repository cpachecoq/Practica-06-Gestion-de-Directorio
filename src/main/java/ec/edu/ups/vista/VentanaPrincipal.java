/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ec.edu.ups.vista;

import ec.edu.ups.controlador.ControladorDirectorio;
import java.awt.Point;
import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author linar
 */
public class VentanaPrincipal extends javax.swing.JFrame {
    
     private ControladorDirectorio controladorDirectorio;

    /**
     * Creates new form VentanaPrincipal
     */
    public VentanaPrincipal() {
        initComponents();
        
        controladorDirectorio = new ControladorDirectorio();
        this.setTitle("Gestionar Directorios");
        this.setLocation(new Point(300, 100));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        Lruta = new javax.swing.JLabel();
        txtRuta = new javax.swing.JTextField();
        btnListarDirectorios = new javax.swing.JButton();
        btnListarArchivosOcultos = new javax.swing.JButton();
        btnListarDirectoriosOcultos = new javax.swing.JButton();
        btnMostarInformacion = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        ListDirectorio = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        TxtInformacion = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        menuGestionarDirectorio = new javax.swing.JMenu();
        menuItemCrear = new javax.swing.JMenuItem();
        menuItemEliminar = new javax.swing.JMenuItem();
        menuItemRenombrar = new javax.swing.JMenuItem();
        menuItemSalir = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel2.setBackground(java.awt.Color.cyan);

        Lruta.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        Lruta.setText("Ingresar Una Ruta :");

        btnListarDirectorios.setText("Listar Directorios");
        btnListarDirectorios.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDirectoriosActionPerformed(evt);
            }
        });

        btnListarArchivosOcultos.setText("Listar Archivos Ocultos");
        btnListarArchivosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarArchivosOcultosActionPerformed(evt);
            }
        });

        btnListarDirectoriosOcultos.setText("Listar Directorios Ocutos");
        btnListarDirectoriosOcultos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnListarDirectoriosOcultosActionPerformed(evt);
            }
        });

        btnMostarInformacion.setText("Mostar Informacion");
        btnMostarInformacion.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostarInformacionActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(ListDirectorio);

        TxtInformacion.setColumns(20);
        TxtInformacion.setRows(5);
        jScrollPane2.setViewportView(TxtInformacion);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel2Layout.createSequentialGroup()
                            .addGap(53, 53, 53)
                            .addComponent(Lruta, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(18, 18, 18)
                            .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 595, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                            .addGap(26, 26, 26)
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addComponent(btnListarDirectorios)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnListarArchivosOcultos)
                                    .addGap(18, 18, 18)
                                    .addComponent(btnListarDirectoriosOcultos))
                                .addComponent(jScrollPane1))
                            .addGap(33, 33, 33)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 318, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(357, 357, 357)
                        .addComponent(btnMostarInformacion)))
                .addContainerGap(25, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(Lruta, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtRuta, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(32, 32, 32)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnListarDirectorios)
                            .addComponent(btnListarArchivosOcultos)
                            .addComponent(btnListarDirectoriosOcultos))
                        .addGap(21, 21, 21)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 308, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGap(124, 124, 124)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 352, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 33, Short.MAX_VALUE)
                .addComponent(btnMostarInformacion)
                .addGap(31, 31, 31))
        );

        menuGestionarDirectorio.setText("Menu Gestionar Directorios");

        menuItemCrear.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        menuItemCrear.setText("Crear");
        menuItemCrear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemCrearActionPerformed(evt);
            }
        });
        menuGestionarDirectorio.add(menuItemCrear);

        menuItemEliminar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_D, java.awt.event.InputEvent.CTRL_MASK));
        menuItemEliminar.setText("Eliminar");
        menuItemEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemEliminarActionPerformed(evt);
            }
        });
        menuGestionarDirectorio.add(menuItemEliminar);

        menuItemRenombrar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_R, java.awt.event.InputEvent.CTRL_MASK));
        menuItemRenombrar.setText("Cambiar Nombre");
        menuItemRenombrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemRenombrarActionPerformed(evt);
            }
        });
        menuGestionarDirectorio.add(menuItemRenombrar);

        menuItemSalir.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        menuItemSalir.setText("Salir");
        menuItemSalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                menuItemSalirActionPerformed(evt);
            }
        });
        menuGestionarDirectorio.add(menuItemSalir);

        jMenuBar1.add(menuGestionarDirectorio);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    
    
    private void menuItemCrearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemCrearActionPerformed
        // TODO add your handling code here:
         String nuevo = null;

        nuevo = JOptionPane.showInputDialog("Ingrese nombre al nuevo directorio");
        if (nuevo == null) {
            
            JOptionPane.showMessageDialog(this, "Directorio no creado");
        } else {
            
            System.out.println(nuevo);
            String ruta = txtRuta.getText();
            if (ruta == null) {
                
                JOptionPane.showMessageDialog(this, "Por favor; Llenar el campo de ruta");
                
            } else {
                
                if (controladorDirectorio.comprobarExistencia(ruta, nuevo)) {
                    
                    int opcion = JOptionPane.showConfirmDialog(this, "Directorio Existente, ¿Desea Sobrescribir?");
                    
                    if (opcion == JOptionPane.YES_OPTION) {
                        
                        controladorDirectorio.crearDirectorio(ruta, nuevo);
                        JOptionPane.showMessageDialog(this, "El directorio se ha creado con exito");
                        
                        List<String> directorio = controladorDirectorio.listarArchivos(ruta);
                        llenarLista(directorio);
                    }

                } else {
                    
                    controladorDirectorio.crearDirectorio(ruta, nuevo);   
                    JOptionPane.showMessageDialog(this, "El directorio se ha creado con exito");
                    
                }
            }
        }
    }//GEN-LAST:event_menuItemCrearActionPerformed

    
    
    private void menuItemEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemEliminarActionPerformed
        // TODO add your handling code here:
        int opcion = JOptionPane.showConfirmDialog(this, "¿Desea eliminar el directorio selecionado? ! Una vez hecho no se podra recuperar ! ");
        
        if (opcion == JOptionPane.YES_OPTION) {
            
            try {
                
                String eliminar = ListDirectorio.getSelectedValue();
                String ruta = txtRuta.getText();
                controladorDirectorio.eliminarDirectorio(ruta, eliminar);
                
                List<String> directorio = controladorDirectorio.listarArchivos(ruta);
                llenarLista(directorio);
                
                JOptionPane.showMessageDialog(this, "El directorio ha sido eliminado");
                
            } catch (IOException ex) {
                
                Logger.getLogger(VentanaPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        
        List<String> directorio = controladorDirectorio.listarArchivos(txtRuta.getText());
        llenarLista(directorio);
    }//GEN-LAST:event_menuItemEliminarActionPerformed

    
    
    private void menuItemRenombrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemRenombrarActionPerformed
        // TODO add your handling code here:
         String renombre = null;

        renombre = JOptionPane.showInputDialog("Ingrese el nuevo nombre del directorio");
        if (renombre == null) {
            
            JOptionPane.showMessageDialog(this, "Accion cancelada");
        } else {
            
            String ruta = txtRuta.getText();
            if (controladorDirectorio.validarRuta(ruta)) {
                
                String actual = ListDirectorio.getSelectedValue();
                controladorDirectorio.renombrarDirectorio(ruta, actual, renombre);
                JOptionPane.showMessageDialog(this, "El nombre del directorio se ha actualizado");
                List<String> directorio = controladorDirectorio.listarArchivos(ruta);
                llenarLista(directorio);
                
            } else {
                
                JOptionPane.showMessageDialog(this, "Por favor !Ingrese una ruta valida!");
            }
        }
    }//GEN-LAST:event_menuItemRenombrarActionPerformed

    
    
    private void menuItemSalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_menuItemSalirActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_menuItemSalirActionPerformed

    
    
    private void btnListarDirectoriosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDirectoriosActionPerformed
        // TODO add your handling code here:
        String ruta = txtRuta.getText();

        String subdirectorio = ListDirectorio.getSelectedValue();

        if (subdirectorio != null) {
            
            List<String> directorios = controladorDirectorio.buscarNombre(ruta, subdirectorio);
            
            //
            txtRuta.setText(controladorDirectorio.devolverRuta(ruta, subdirectorio));
            subdirectorio = null;
            if (directorios.isEmpty()) {
                
                JOptionPane.showMessageDialog(this, "El directorio no muestra contenido");

                limpiarLista();
                
            } else {
                
                llenarLista(directorios);
            }
            
        } else {
            
            if (ruta == null) {
                
                JOptionPane.showMessageDialog(this, "Por Favor !llene el campo de ruta!");
            } else {
                
                if (controladorDirectorio.validarRuta(ruta)) {
                    
                    List<String> directorios = controladorDirectorio.listarArchivos(ruta);
                    if (directorios.isEmpty()) {
                        
                        JOptionPane.showMessageDialog(this, "El directorio nomuestra contenido");
                        limpiarLista();
                    } else {
                        
                        llenarLista(directorios);
                    }
                } else {
                    
                    JOptionPane.showMessageDialog(this, "Ingrese una ruta valida");

                }

            }
        }
    }//GEN-LAST:event_btnListarDirectoriosActionPerformed

    
    
    private void btnListarArchivosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarArchivosOcultosActionPerformed
        // TODO add your handling code here:
         String ruta = txtRuta.getText();

        if (ruta == null) {
            
            JOptionPane.showMessageDialog(this, "Por favor ¡llene el campo de ruta¡");
        } else {
            
            if (controladorDirectorio.validarRuta(ruta)) {
                
                List<String> directorios = controladorDirectorio.listarArchivosOcultos(ruta);
                if (directorios.isEmpty()) {
                    
                    JOptionPane.showMessageDialog(this, "El directorio no contiene archivos ocultos");
                    limpiarLista();
                } else {
                    
                    llenarLista(directorios);
                }
                
            } else {
                
                JOptionPane.showMessageDialog(this, "Ingrese una ruta valida");

            }

        }          
    }//GEN-LAST:event_btnListarArchivosOcultosActionPerformed

    
    
    private void btnListarDirectoriosOcultosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnListarDirectoriosOcultosActionPerformed
        // TODO add your handling code here:
         String ruta = txtRuta.getText();

        if (ruta == null) {
            
            JOptionPane.showMessageDialog(this, "Por favor ¡llene el campo de ruta¡");
            
        } else {
            
            if (controladorDirectorio.validarRuta(ruta)) {
                
                List<String> directorios = controladorDirectorio.listarDirectoriosOcultos(ruta);
                if (directorios.isEmpty()) {
                    
                    JOptionPane.showMessageDialog(this, "No se ha encontrado directorios ocultos");
                    limpiarLista();
                    
                } else {
                    
                    llenarLista(directorios);
                }
            } else {
                
                JOptionPane.showMessageDialog(this, "Ingrese una ruta valida");
            }

        }
    }//GEN-LAST:event_btnListarDirectoriosOcultosActionPerformed

    
    
    private void btnMostarInformacionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostarInformacionActionPerformed
        // TODO add your handling code here:
        String nombre = ListDirectorio.getSelectedValue();
        
        String ruta = txtRuta.getText();
        
        String informacion = controladorDirectorio.mostrarInformacion(nombre, ruta);
        
        TxtInformacion.setText(informacion);
    }//GEN-LAST:event_btnMostarInformacionActionPerformed
    
    
    
    public void llenarLista(List<String> directorio) {
        DefaultListModel modelo = new DefaultListModel();
        
        modelo.clear();

        for (String nombre : directorio) {
            
            modelo.addElement(nombre);
            
        }
        ListDirectorio.setModel(modelo);
    }
    
    

    public void limpiarLista() {
        DefaultListModel modelo = new DefaultListModel();
        modelo.clear();
        ListDirectorio.setModel(modelo);
    }
    
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                
                if ("Nimbus".equals(info.getName())) {
                    
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (InstantiationException ex) {
            
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (IllegalAccessException ex) {
            
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            
            java.util.logging.Logger.getLogger(VentanaPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
            
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new VentanaPrincipal().setVisible(true);
            }
        });
    }

    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<String> ListDirectorio;
    private javax.swing.JLabel Lruta;
    private javax.swing.JTextArea TxtInformacion;
    private javax.swing.JButton btnListarArchivosOcultos;
    private javax.swing.JButton btnListarDirectorios;
    private javax.swing.JButton btnListarDirectoriosOcultos;
    private javax.swing.JButton btnMostarInformacion;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JMenu menuGestionarDirectorio;
    private javax.swing.JMenuItem menuItemCrear;
    private javax.swing.JMenuItem menuItemEliminar;
    private javax.swing.JMenuItem menuItemRenombrar;
    private javax.swing.JMenuItem menuItemSalir;
    private javax.swing.JTextField txtRuta;
    // End of variables declaration//GEN-END:variables
}
